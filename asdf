#!/bin/bash

shell=unknown
sourced=false
current_dir=

if [[ -n $BASH_VERSION ]]; then
  if [[ "${BASH_SOURCE}" != "$0" ]]; then
    sourced=true
  fi
  shell="bash"
elif [[ -n $ZSH_VERSION ]]; then
  if [[ "${(%):-%x} != "$0"" ]]; then
    sourced=true
  fi
  shell="zsh"
else
  echo "WARNING: Unknown shell. This was made for bash and zsh."
  echo "  It may not work for your shell."
fi

# command line switch defaults
write=true

function _help() {
  echo "Usage: asdf [OPTION]"
  echo "Fast and flexible history searching and exploring."
  echo "Type a command to search your history for it."
  echo "Spaces allow you to search for multiple strings at the same time."
  echo ""
  echo "Controls:"
  echo "  Press Enter to run the command, or ^Space to edit the command and then run it."
  echo "  ^C to exit at any time without running anything."
  echo ""
  echo "Available options:"
  echo "  --write:[true|false]    Whether to write to HISTFILE when running a command."
  echo "                          Default:true"
  echo "  --help                  Print this help text and exit."
}

function _asdf_main() {
  results=`HISTFILE="$HISTFILE" ${current_dir}/asdf_search.exe`
  asdf_status=$?
  if [ $asdf_status -ge 10 ]; then
    to_run=$results
    if [ $asdf_status -eq 11 ]; then
      read -e -i "$results" to_run
    fi
    if [[ "$to_run" != "" && "$to_run" ]]; then
      if [ $asdf_status -ne 11 ]; then
        echo "$to_run"
      fi
      if [[ $write == true ]]; then
        if [[ $shell == "bash" ]]; then
          history -s "$to_run"
        elif [[ $shell == "zsh" ]]; then
          print -S "$to_run"
        fi
      fi
      eval $to_run
    fi
  fi
}

if [[ $sourced == true ]]; then
  if [[ "$shell" =~ "bash" ]]; then
    current_dir=`dirname ${BASH_SOURCE}`
  elif [[ "$shell" =~ "zsh" ]]; then
    current_dir=`dirname ${(%):-%x}`
  fi
else
  echo "WARNING: It seems like this is running as a script."
  echo "  Some commands (like cd), and features (like adding to HISTFILE) won't work."
  echo "  Source this script instead of just running it to resolve these issues."
  current_dir=`dirname $0`
fi

runasdf=true

# process arguments
while [ "$1" != "" ]; do
  case $1 in
  --help*)
    _help
    runasdf=false
    ;;
  --write:*)
    write=`echo $1 | sed 's/^--[^:]\+:\(.*\)$/\1/'`
    ;;
  *)
    echo "Unknown argument, printing helptext and exiting..."
    _help
    runasdf=false
  esac
  shift
done

if [[ $runasdf == true ]]; then
  _asdf_main
fi
